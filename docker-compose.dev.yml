services:
  postgres_dev:
    image: postgres:15
    restart: always
    volumes:
      - db_data_dev:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"

  graphql-engine:
    image: hasura/graphql-engine:v2.42.0
    ports:
      - "8080:8080"
    restart: always
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres_dev:5432/postgres
      PG_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres_dev:5432/postgres
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET_DEV}
      HASURA_GRAPHQL_PROMETHEUS_ENABLE: "true"
    depends_on:
      - postgres_dev

  # this for multi database support  
  # data-connector-agent:
  #   image: hasura/graphql-data-connector:v2.43.0
  #   restart: always
  #   ports:
  #     - 8082:8081
  #   environment:
  #     QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
  #     ## https://quarkus.io/guides/opentelemetry#configuration-reference
  #     QUARKUS_OPENTELEMETRY_ENABLED: "false"
  #     ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8082/api/v1/athena/health"]
  #     interval: 5s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 5s

volumes:
  db_data_dev: